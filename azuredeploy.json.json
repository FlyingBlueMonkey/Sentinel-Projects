{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata":{
        "comments": "This playbook will will export log analytics data into blob storage",
        "author": "Matt Lowe, Rin Ure, Matt Egen, Chris Boehm"
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "LAtoBlob",
            "type": "string"
        },
        "ExclusionTable": {
        "defaultValue": "<yourtable>",
        "type": "string"
        }
    },
    "variables": {
"azureblob_1": "[concat('azureblob_1', parameters('PlaybookName'))]",
        "azuremonitorlogs": "[concat('azuremonitorlogs', parameters('PlaybookName'))]"


    },
    "resources":  [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('azureblob_1')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('azuremonitorlogs')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "LogicAppsCategory": "security"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('azureblob_1'))]",
                "[resourceId('Microsoft.Web/connections', variables('azuremonitorlogs'))]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Day",
                                "interval": 1
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {
                        "Compose_Table_Names": {
                            "runAfter": {
                                "Run_query_and_list_results": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "@body('Run_query_and_list_results')"
                        },
                        "Condition": {
                            "actions": {
                                "For_Each_DataType": {
                                    "foreach": "@body('Parse_JSON')?['value']",
                                    "actions": {
                                        "Set_variable": {
                                            "runAfter": {
                                                "Until": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "HoursCount",
                                                "value": 0
                                            }
                                        },
                                        "Until": {
                                            "actions": {
                                                "Compose": {
                                                    "runAfter": {
                                                        "Run_query_and_list_results_2": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Compose",
                                                    "inputs": "@body('Run_query_and_list_results_2')?['value']"
                                                },
                                                "Create_blob_2": {
                                                    "runAfter": {
                                                        "Compose": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "body": "@outputs('Compose')",
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['azureblob_1']['connectionId']"
                                                            }
                                                        },
                                                        "method": "post",
                                                        "path": "/datasets/default/files",
                                                        "queries": {
                                                            "folderPath": "@{items('For_Each_DataType')?['DataType']}",
                                                            "name": "@{items('For_Each_DataType')?['DataType']}-@{variables('StartDate')}- @{variables('HoursCount')}.json",
                                                            "queryParametersSingleEncoded": true
                                                        }
                                                    },
                                                    "runtimeConfiguration": {
                                                        "contentTransfer": {
                                                            "transferMode": "Chunked"
                                                        }
                                                    }
                                                },
                                                "Increment_variable": {
                                                    "runAfter": {
                                                        "Create_blob_2": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "IncrementVariable",
                                                    "inputs": {
                                                        "name": "HoursCount",
                                                        "value": 1
                                                    }
                                                },
                                                "Run_query_and_list_results_2": {
                                                    "runAfter": {},
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "body": "@{items('For_Each_DataType')?['DataType']}\n| where ingestion_time() between(datetime(@{formatDateTime(addHours(variables('StartDate'),variables('HoursCount')))}) .. datetime(@{formatDateTime(addHours(variables('StartDate'),add(int(variables('HoursCount')),1)))}))",
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                                            }
                                                        },
                                                        "method": "post",
                                                        "path": "/queryData",
                                                        "queries": {
                                                            "resourcegroups": "",
                                                            "resourcename": "",
                                                            "resourcetype": "Log Analytics Workspace",
                                                            "subscriptions": "",
                                                            "timerange": "between(datetime(@{formatDateTime(addHours(variables('StartDate'),variables('HoursCount')))}) .. datetime(@{formatDateTime(addHours(variables('StartDate'),add(int(variables('HoursCount')),1)))})"
                                                        }
                                                    }
                                                }
                                            },
                                            "runAfter": {},
                                            "expression": "@equals(variables('HoursCount'), 24)",
                                            "limit": {
                                                "count": 60,
                                                "timeout": "PT1H"
                                            },
                                            "type": "Until"
                                        }
                                    },
                                    "runAfter": {},
                                    "type": "Foreach",
                                    "runtimeConfiguration": {
                                        "concurrency": {
                                            "repetitions": 1
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Parse_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "For_each": {
                                        "foreach": "@body('Parse_JSON')?['value']",
                                        "actions": {
                                            "Compose_Blob_Body": {
                                                "runAfter": {
                                                    "Query_Each_Table_and_Return_Results": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "Compose",
                                                "inputs": "@body('Query_Each_Table_and_Return_Results')?['value']"
                                            },
                                            "Create_blob": {
                                                "runAfter": {
                                                    "Compose_Blob_Body": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "ApiConnection",
                                                "inputs": {
                                                    "body": "@outputs('Compose_Blob_Body')",
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['azureblob_1']['connectionId']"
                                                        }
                                                    },
                                                    "method": "post",
                                                    "path": "/datasets/default/files",
                                                    "queries": {
                                                        "folderPath": "@{items('For_each')?['DataType']}",
                                                        "name": "@{items('For_each')?['DataType']}-@{variables('StartDate')}.Daily.json",
                                                        "queryParametersSingleEncoded": true
                                                    }
                                                },
                                                "runtimeConfiguration": {
                                                    "contentTransfer": {
                                                        "transferMode": "Chunked"
                                                    }
                                                }
                                            },
                                            "Query_Each_Table_and_Return_Results": {
                                                "runAfter": {},
                                                "type": "ApiConnection",
                                                "inputs": {
                                                    "body": "@{items('For_each')?['DataType']}\n| where ingestion_time() between(datetime(@{variables('StartDate')}) .. datetime(@{variables('EndDate')}))\n",
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                                        }
                                                    },
                                                    "method": "post",
                                                    "path": "/queryData",
                                                    "queries": {
                                                        "resourcegroups": "",
                                                        "resourcename": "",
                                                        "resourcetype": "Log Analytics Workspace",
                                                        "subscriptions": "",
                                                        "timerange": "between(datetime(@{variables('StartDate')})..datetime(@{variables('EndDate')}))"
                                                    }
                                                }
                                            }
                                        },
                                        "runAfter": {},
                                        "type": "Foreach"
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('RunHourly')",
                                            true
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Initialize_EndDate_variable": {
                            "runAfter": {
                                "Initialize_StartDate_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "EndDate",
                                        "type": "string",
                                        "value": "@{formatDateTime(addDays(utcNow(), -88),'yyyy-MM-dd')}"
                                    }
                                ]
                            }
                        },
                        "Initialize_ExludedDataTypes_variable": {
                            "runAfter": {
                                "Initialize_EndDate_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "ExcludedDataTypes",
                                        "type": "string",
                                        "value":"[parameters('ExclusionTable')]"
                                    }
                                ]
                            }
                        },
                        "Initialize_StartDate_variable": {
                            "runAfter": {
                                "Initialize_variable_2": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "StartDate",
                                        "type": "string",
                                        "value": "@{formatDateTime(addDays(utcNow(), -89),'yyyy-MM-dd')}"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "RunHourly",
                                        "type": "boolean",
                                        "value": true
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_2": {
                            "runAfter": {
                                "Initialize_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "HoursCount",
                                        "type": "integer",
                                        "value": 0
                                    }
                                ]
                            }
                        },
                        "Parse_JSON": {
                            "runAfter": {
                                "Compose_Table_Names": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@outputs('Compose_Table_Names')",
                                "schema": {
                                    "properties": {
                                        "value": {
                                            "items": {
                                                "properties": {
                                                    "DataType": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "DataType"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "Run_query_and_list_results": {
                            "runAfter": {
                                "Initialize_ExludedDataTypes_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "let excludedDataTypes = dynamic([@{variables('ExcludedDataTypes')}]);\nUsage \n| distinct DataType\n| where DataType !in (excludedDataTypes)",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/queryData",
                                "queries": {
                                    "resourcegroups": "",
                                    "resourcename": "",
                                    "resourcetype": "Log Analytics Workspace",
                                    "subscriptions": "",
                                    "timerange": "between(datetime(@{variables('StartDate')})..datetime(@{variables('EndDate')}))"
                                }
                            },
                            "description": "Retrieves the distinct data table names from the Usage tables that are *not* in the ExcludedDataTypes list"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureblob_1": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('azureblob_1'))]",
                                "connectionName": "[variables('azureblob_1')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                            },
                            "azuremonitorlogs": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('azuremonitorlogs'))]",
                                "connectionName": "[variables('azuremonitorlogs')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}